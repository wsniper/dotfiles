#!/usr/bin/env bash
# By https://github.com/weaming
# This file will be source by bash or zsh

# -------------------------------------------------------------------
# System language
# -------------------------------------------------------------------
export TZ='Asia/Shanghai'
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# POWERFUL TOOL
function col() { awk -v col="$1" '{print $col}'; }
status() { ps aux | grep "$1" | grep -v grep; }

# -------------------------------------------------------------------
# enable color support of ls and also add handy aliases
# -------------------------------------------------------------------

if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# -------------------------------------------------------------------
# some ls aliases
# -------------------------------------------------------------------
alias ll='ls -lFh'
alias la='ls -A'
alias l='ls -CF'
alias lsabs='ls | sed "s:^:`pwd`/:"'
# not work on Mac, but for linux:
alias lt='ls -clth --time-style=long-iso'

# -------------------------------------------------------------------
# magic cd
# -------------------------------------------------------------------
cdls() {
    builtin cd "$@" && ls -F
}

alias cd=cdls

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias dload="cd ~/Downloads"
alias src="cd ~/src"

# -------------------------------------------------------------------
# download all static files of one site
# -------------------------------------------------------------------
alias getsite="wget -r -k -p -np"

# -------------------------------------------------------------------
# Check OS
# -------------------------------------------------------------------
checkos()
{
    OS=unknown
    if [ -f /etc/redhat-release ];then
        OS=CentOS
    elif grep -q bian < /etc/issue;then
        OS=Debian
    elif grep -q Ubuntu < /etc/issue;then
        OS=Ubuntu
    elif grep -q Mint < /etc/issue;then
        OS=LinuxMint
    else
        echo "Unknow system!"
        return 1
    fi
    echo "The System is $OS"
}

# -------------------------------------------------------------------
# golang env
# -------------------------------------------------------------------
export GOROOT=/usr/local/go
export GOPATH=~/go
export GOBIN=$GOPATH/bin
alias cdgo='cd $GOPATH'
alias installgopm="go get -u github.com/gpmgo/gopm"
updateGOPATH()
{
    if [ ! -z "$OLDGOPATH" ]; then
        GOPATH=$OLDGOPATH
    fi
    export OLDGOPATH=$GOPATH
    if [[ "`pwd`" =~ .+/src$ ]]; then
        export GOPATH="`pwd`/..:$GOPATH"
    else
        export GOPATH="`pwd`:$GOPATH"
    fi

    echo "OLDGOPATH=$OLDGOPATH"
    echo "GOPATH=$GOPATH"
}
alias f6=updateGOPATH

# -------------------------------------------------------------------
# $PATH
# -------------------------------------------------------------------
# Go
export PATH=$GOROOT/bin:$GOPATH/bin:$PATH
# node
export PATH=~/npm/bin:/usr/local/node/bin:$PATH
# Rust
export PATH=~/.cargo/bin:$PATH

# -------------------------------------------------------------------
# tar safely with a password (http://www.ha97.com/5114.html)
# -------------------------------------------------------------------
# tarsafe target output password
tarsafe()
{
    tar -zcvf - "$1" | openssl des3 -salt -k "$3" | dd of="$2"
}

# xtar target
xtar()
{
    dd if="$1" | openssl des3 -d | tar zxf -
}

# -------------------------------------------------------------------
# git
# -------------------------------------------------------------------
alias gconf="vi .git/config"
alias gamend='git add -A && git commit --amend'
alias greset='git reset --hard HEAD'
alias gback='git reset --hard HEAD^'
alias gl='git lg'

alias gpl='git pull'
alias gcl='git clone'
alias gps='git push'
alias glg='git log'
alias gs='git status'
alias gd='git diff'
alias ga='git add -A'
alias gm='git commit -m'
alias gma='git commit -am'
alias gb='git branch'
alias gc='git checkout'
alias gra='git remote add'
alias grr='git remote rm'
alias grv='git remote -v'
alias gta='git tag -a -m'
alias gf='git reflog'

getgitignore()
{
    url="https://raw.githubusercontent.com/github/gitignore/master/$1.gitignore"
    type wget &>/dev/null && wget $url -O .gitignore || curl -sSL $url > .gitignore
}
gitproxy()
{
    if [ -z "$1" ]; then
        git config --get http.proxy
        git config --get https.proxy
    else
        git config --global http.proxy "$1"
        git config --global https.proxy "$1"
    fi
}
gitnoproxy()
{
    git config --global --unset http.proxy
    git config --global --unset https.proxy
}
gforceupdate()
{
    git fetch && git checkout origin/master && git checkout -B master
}

# -------------------------------------------------------------------
# monitoring system
# -------------------------------------------------------------------
# PROXY
useproxy()
{
    export http_proxy=${PROXY}
    export https_proxy=${PROXY}
}
alias noproxy="unset http_proxy https_proxy HTTP_PROXY HTTPS_PROXY"
alias up="useproxy"
alias np="noproxy"
#alias fuckgfw='sudo sslocal -c /etc/shadowsocks.json -d start'

# DISK & MEMORY
alias freemem="sudo bash -c 'echo 1 > /proc/sys/vm/drop_caches'"
alias df="df -h"

# NETWORK
alias lsconn="netstat -ntu | awk 'NR>2 {print $5}' | cut -d: -f1 | sort | uniq -c | sort -nr"
function lstcp() { netstat -nat | awk '/^tcp/ {++S[$NF]} END {for(a in S) print S[a] "\t" a}'; }
function lsport() { sudo netstat -plan | grep "$1"; }
alias myip="ifconfig | grep inet | grep -v inet6 | grep -v 127 | awk '{print \$2}'"
alias getip="curl ip.gs 2>/dev/null | grep --color=never -Eo '([0-9]{1,3}\.){3}([0-9]{1,3})'"

# for CentOS
openport()
{
    [ -f /etc/redhat-release ] || echo 'This is for CentOS only!' && return 1;
    /sbin/iptables -I INPUT -p udp --dport "$1" -j ACCEPT
    /sbin/iptables -I INPUT -p tcp --dport "$1" -j ACCEPT

    /etc/init.d/iptables save
    /etc/init.d/iptables restart
    /etc/init.d/iptables status
}

# FILE SYSTEM
alias lsfile="ls -ahlS | grep -v '^d'"
rename()
{
    # expects to be called as: rename .txt .bak
    FROM=$1
    TO=$2

    for i in *$FROM
    do
        j=`basename $i $FROM`
        sudo mv $i ${j}$TO
    done
}

# DATETIME
alias updatetime="ntpdate asia.pool.ntp.org"

# -------------------------------------------------------------------
# simple python http static server
# -------------------------------------------------------------------
http()
{
    if [ -z "$1" ]; then
        port=8000
    else
        port=$1
    fi
    if [ "$port" -lt 1024 ]; then
        type sudo &>/dev/null && sudo python -m SimpleHTTPServer ${port} || python -m SimpleHTTPServer "$port"
    else
        python -m SimpleHTTPServer "$port"
    fi
}

# -------------------------------------------------------------------
# edit
# -------------------------------------------------------------------
export EDITOR='vim'
alias v="vim"
alias vi="vim"
alias vimrc="vim ~/.vimrc"
alias aliases="vim ~/.aliases"
alias bashrc="vim ~/.bashrc"

addtohead()
{
    sed -i "1s/^/$1\n/" "$2"
}

# -------------------------------------------------------------------
# docker
# $ sudo systemctl start docker
# $ sudo service docker start
# -------------------------------------------------------------------
# 杀死所有正在运行的容器.
alias dockerkill='docker kill $(docker ps -a -q)'
# 删除所有已经停止的容器.
alias dockercleanc='docker rm $(docker ps -a -q)'
# 删除所有未打标签的镜像.
alias dockercleani='docker rmi $(docker images -q -f dangling=true)'
# 删除所有已经停止的容器和未打标签的镜像.
alias dockerclean='dockercleanc || true && dockercleani'

# -------------------------------------------------------------------
# npm
# -------------------------------------------------------------------
alias npmtaobao="npm config set registry https://registry.npm.taobao.org"
alias npmofficial="npm config delete registry"
function npmls() { npm ls --depth 0 "$@" }
npmproxy()
{
    if [ -z "$1" ]; then
        npm config get proxy
        npm config get https-proxy
        return 0
    fi
    npm config set proxy "$1"
    npm config set https-proxy "$1"
}
npmnoproxy()
{
    npm config delete proxy
    npm config delete https-proxy
}

# simple install
alias installdocker="wget -O- https://get.docker.com/ | sh"

# -------------------------------------------------------------------
# 增加动态性配置
# -------------------------------------------------------------------
if [ -f ~/.userrc ]; then
    source ~/.userrc
fi
# End
